// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DOTNET_PIZZA_APP.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240124184056_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DrinkSizeDrinkType", b =>
                {
                    b.Property<string>("DrinkSizesDrinkSizeId")
                        .HasColumnType("text");

                    b.Property<string>("DrinkTypesDrinkTypeId")
                        .HasColumnType("text");

                    b.HasKey("DrinkSizesDrinkSizeId", "DrinkTypesDrinkTypeId");

                    b.HasIndex("DrinkTypesDrinkTypeId");

                    b.ToTable("DrinkSizeDrinkType");
                });

            modelBuilder.Entity("PizzaModels.DrinkSize", b =>
                {
                    b.Property<string>("DrinkSizeId")
                        .HasColumnType("text");

                    b.Property<string>("DrinkSizeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DrinkSizePrice")
                        .HasColumnType("integer");

                    b.HasKey("DrinkSizeId");

                    b.ToTable("DrinkSizes");
                });

            modelBuilder.Entity("PizzaModels.DrinkType", b =>
                {
                    b.Property<string>("DrinkTypeId")
                        .HasColumnType("text");

                    b.Property<string>("DrinkTypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DrinkTypeId");

                    b.ToTable("DrinkTypes");
                });

            modelBuilder.Entity("PizzaModels.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("text");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("PizzaModels.OrderItem", b =>
                {
                    b.Property<string>("OrderItemId")
                        .HasColumnType("text");

                    b.Property<string>("DrinkSizeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DrinkTypeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrderId")
                        .HasColumnType("text");

                    b.Property<string>("PizzaSizeId")
                        .HasColumnType("text");

                    b.Property<string>("PizzaTypeId")
                        .HasColumnType("text");

                    b.HasKey("OrderItemId");

                    b.HasIndex("DrinkSizeId");

                    b.HasIndex("DrinkTypeId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PizzaSizeId");

                    b.HasIndex("PizzaTypeId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("PizzaModels.PizzaPrice", b =>
                {
                    b.Property<string>("PizzaPriceId")
                        .HasColumnType("text");

                    b.Property<int>("PizzaPriceAmount")
                        .HasColumnType("integer");

                    b.Property<string>("PizzaSizeId")
                        .HasColumnType("text");

                    b.Property<string>("PizzaTypeId")
                        .HasColumnType("text");

                    b.HasKey("PizzaPriceId");

                    b.HasIndex("PizzaSizeId");

                    b.HasIndex("PizzaTypeId");

                    b.ToTable("PizzaPrices");
                });

            modelBuilder.Entity("PizzaModels.PizzaSize", b =>
                {
                    b.Property<string>("PizzaSizeId")
                        .HasColumnType("text");

                    b.Property<string>("PizzaSizeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PizzaSizeId");

                    b.ToTable("PizzaSizes");
                });

            modelBuilder.Entity("PizzaModels.PizzaToppings", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ToppingName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PizzaToppings");
                });

            modelBuilder.Entity("PizzaModels.PizzaType", b =>
                {
                    b.Property<string>("PizzaTypeId")
                        .HasColumnType("text");

                    b.Property<string>("PizzaDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PizzaName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PizzaTypeId");

                    b.ToTable("PizzaTypes");
                });

            modelBuilder.Entity("PizzaToppingsPizzaType", b =>
                {
                    b.Property<string>("PizzaToppingsId")
                        .HasColumnType("text");

                    b.Property<string>("PizzaTypesPizzaTypeId")
                        .HasColumnType("text");

                    b.HasKey("PizzaToppingsId", "PizzaTypesPizzaTypeId");

                    b.HasIndex("PizzaTypesPizzaTypeId");

                    b.ToTable("PizzaToppingsPizzaType");
                });

            modelBuilder.Entity("DrinkSizeDrinkType", b =>
                {
                    b.HasOne("PizzaModels.DrinkSize", null)
                        .WithMany()
                        .HasForeignKey("DrinkSizesDrinkSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PizzaModels.DrinkType", null)
                        .WithMany()
                        .HasForeignKey("DrinkTypesDrinkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PizzaModels.OrderItem", b =>
                {
                    b.HasOne("PizzaModels.DrinkSize", "DrinkSize")
                        .WithMany()
                        .HasForeignKey("DrinkSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PizzaModels.DrinkType", "DrinkType")
                        .WithMany()
                        .HasForeignKey("DrinkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PizzaModels.Order", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId");

                    b.HasOne("PizzaModels.PizzaSize", "PizzaSize")
                        .WithMany()
                        .HasForeignKey("PizzaSizeId");

                    b.HasOne("PizzaModels.PizzaType", "PizzaType")
                        .WithMany()
                        .HasForeignKey("PizzaTypeId");

                    b.Navigation("DrinkSize");

                    b.Navigation("DrinkType");

                    b.Navigation("PizzaSize");

                    b.Navigation("PizzaType");
                });

            modelBuilder.Entity("PizzaModels.PizzaPrice", b =>
                {
                    b.HasOne("PizzaModels.PizzaSize", "PizzaSize")
                        .WithMany()
                        .HasForeignKey("PizzaSizeId");

                    b.HasOne("PizzaModels.PizzaType", "PizzaType")
                        .WithMany()
                        .HasForeignKey("PizzaTypeId");

                    b.Navigation("PizzaSize");

                    b.Navigation("PizzaType");
                });

            modelBuilder.Entity("PizzaToppingsPizzaType", b =>
                {
                    b.HasOne("PizzaModels.PizzaToppings", null)
                        .WithMany()
                        .HasForeignKey("PizzaToppingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PizzaModels.PizzaType", null)
                        .WithMany()
                        .HasForeignKey("PizzaTypesPizzaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PizzaModels.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
